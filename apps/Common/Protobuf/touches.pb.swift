// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Common/Protobuf/touches.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Touches_Label: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case other // = 0

  /// Common basic symbols
  case checkmark // = 1
  case xmark // = 2

  /// Lines
  /// LINE_VERTICAL = 16;
  case lineAscending // = 18
  case scribble // = 23

  /// Shapes
  case circle // = 24

  /// TRIANGLE = 25;
  /// SQUARE = 27;
  case semicircleOpenUp // = 30

  /// SEMICIRCLE_OPEN_DOWN = 31;
  /// V_OPEN_UP = 34;
  /// V_OPEN_DOWN = 35;
  case heart // = 39

  /// Math
  case plusSign // = 40

  /// Punctuation
  case questionMark // = 50

  /// Letters and numbers
  case letterACapital // = 60

  /// LETTER_C_CAPITAL = 62;
  case letterBCapital // = 61

  /// Faces
  case faceHappy // = 130
  case faceSad // = 131
  case UNRECOGNIZED(Int)

  init() {
    self = .other
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .other
    case 1: self = .checkmark
    case 2: self = .xmark
    case 18: self = .lineAscending
    case 23: self = .scribble
    case 24: self = .circle
    case 30: self = .semicircleOpenUp
    case 39: self = .heart
    case 40: self = .plusSign
    case 50: self = .questionMark
    case 60: self = .letterACapital
    case 61: self = .letterBCapital
    case 130: self = .faceHappy
    case 131: self = .faceSad
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .other: return 0
    case .checkmark: return 1
    case .xmark: return 2
    case .lineAscending: return 18
    case .scribble: return 23
    case .circle: return 24
    case .semicircleOpenUp: return 30
    case .heart: return 39
    case .plusSign: return 40
    case .questionMark: return 50
    case .letterACapital: return 60
    case .letterBCapital: return 61
    case .faceHappy: return 130
    case .faceSad: return 131
    case .UNRECOGNIZED(let i): return i
    }
  }

}

struct Touches_Vector: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Vector"

  var x: Double = 0

  var y: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.x)
      case 2: try decoder.decodeSingularDoubleField(value: &self.y)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularDoubleField(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularDoubleField(value: self.y, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Touches_Sample: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Sample"

  var time: Double {
    get {return _storage._time}
    set {_uniqueStorage()._time = newValue}
  }

  var position: Touches_Vector {
    get {return _storage._position ?? Touches_Vector()}
    set {_uniqueStorage()._position = newValue}
  }
  /// Returns true if `position` has been explicitly set.
  var hasPosition: Bool {return _storage._position != nil}
  /// Clears the value of `position`. Subsequent reads from it will return its default value.
  mutating func clearPosition() {_storage._position = nil}

  var majorRadius: Double {
    get {return _storage._majorRadius}
    set {_uniqueStorage()._majorRadius = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularDoubleField(value: &_storage._time)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._position)
        case 3: try decoder.decodeSingularDoubleField(value: &_storage._majorRadius)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._time != 0 {
        try visitor.visitSingularDoubleField(value: _storage._time, fieldNumber: 1)
      }
      if let v = _storage._position {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._majorRadius != 0 {
        try visitor.visitSingularDoubleField(value: _storage._majorRadius, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Touches_Stroke: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Stroke"

  var samples: [Touches_Sample] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.samples)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.samples.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.samples, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Touches_Drawing: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Drawing"

  var strokes: [Touches_Stroke] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.strokes)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.strokes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.strokes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Touches_DrawingList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".DrawingList"

  var drawings: [Touches_Drawing] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.drawings)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.drawings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.drawings, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Touches_RawDataSet: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".RawDataSet"

  var drawingList: Touches_DrawingList {
    get {return _storage._drawingList ?? Touches_DrawingList()}
    set {_uniqueStorage()._drawingList = newValue}
  }
  /// Returns true if `drawingList` has been explicitly set.
  var hasDrawingList: Bool {return _storage._drawingList != nil}
  /// Clears the value of `drawingList`. Subsequent reads from it will return its default value.
  mutating func clearDrawingList() {_storage._drawingList = nil}

  var labels: [Touches_Label] {
    get {return _storage._labels}
    set {_uniqueStorage()._labels = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._drawingList)
        case 2: try decoder.decodeRepeatedEnumField(value: &_storage._labels)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._drawingList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._labels.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._labels, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Touches_Image: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".Image"

  var height: Int32 = 0

  var width: Int32 = 0

  var values: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.height)
      case 2: try decoder.decodeSingularInt32Field(value: &self.width)
      case 15: try decoder.decodeSingularBytesField(value: &self.values)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 1)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 2)
    }
    if !self.values.isEmpty {
      try visitor.visitSingularBytesField(value: self.values, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Touches_LabelledImage: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".LabelledImage"

  var image: Touches_Image {
    get {return _storage._image ?? Touches_Image()}
    set {_uniqueStorage()._image = newValue}
  }
  /// Returns true if `image` has been explicitly set.
  var hasImage: Bool {return _storage._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
  mutating func clearImage() {_storage._image = nil}

  var label: Touches_Label {
    get {return _storage._label}
    set {_uniqueStorage()._label = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._image)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._label)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._image {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._label != .other {
        try visitor.visitSingularEnumField(value: _storage._label, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Touches_TrainingSet: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".TrainingSet"

  var labelledImages: [Touches_LabelledImage] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.labelledImages)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.labelledImages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.labelledImages, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Touches_ImageList: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".ImageList"

  var images: [Touches_Image] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.images)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.images.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.images, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "touches"

extension Touches_Label: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OTHER"),
    1: .same(proto: "CHECKMARK"),
    2: .same(proto: "XMARK"),
    18: .same(proto: "LINE_ASCENDING"),
    23: .same(proto: "SCRIBBLE"),
    24: .same(proto: "CIRCLE"),
    30: .same(proto: "SEMICIRCLE_OPEN_UP"),
    39: .same(proto: "HEART"),
    40: .same(proto: "PLUS_SIGN"),
    50: .same(proto: "QUESTION_MARK"),
    60: .same(proto: "LETTER_A_CAPITAL"),
    61: .same(proto: "LETTER_B_CAPITAL"),
    130: .same(proto: "FACE_HAPPY"),
    131: .same(proto: "FACE_SAD"),
  ]
}

extension Touches_Vector: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
  ]

  func _protobuf_generated_isEqualTo(other: Touches_Vector) -> Bool {
    if self.x != other.x {return false}
    if self.y != other.y {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Touches_Sample: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "time"),
    2: .same(proto: "position"),
    3: .standard(proto: "major_radius"),
  ]

  fileprivate class _StorageClass {
    var _time: Double = 0
    var _position: Touches_Vector? = nil
    var _majorRadius: Double = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _time = source._time
      _position = source._position
      _majorRadius = source._majorRadius
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Touches_Sample) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._time != other_storage._time {return false}
        if _storage._position != other_storage._position {return false}
        if _storage._majorRadius != other_storage._majorRadius {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Touches_Stroke: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "samples"),
  ]

  func _protobuf_generated_isEqualTo(other: Touches_Stroke) -> Bool {
    if self.samples != other.samples {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Touches_Drawing: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "strokes"),
  ]

  func _protobuf_generated_isEqualTo(other: Touches_Drawing) -> Bool {
    if self.strokes != other.strokes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Touches_DrawingList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "drawings"),
  ]

  func _protobuf_generated_isEqualTo(other: Touches_DrawingList) -> Bool {
    if self.drawings != other.drawings {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Touches_RawDataSet: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "drawingList"),
    2: .same(proto: "labels"),
  ]

  fileprivate class _StorageClass {
    var _drawingList: Touches_DrawingList? = nil
    var _labels: [Touches_Label] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _drawingList = source._drawingList
      _labels = source._labels
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Touches_RawDataSet) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._drawingList != other_storage._drawingList {return false}
        if _storage._labels != other_storage._labels {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Touches_Image: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
    2: .same(proto: "width"),
    15: .same(proto: "values"),
  ]

  func _protobuf_generated_isEqualTo(other: Touches_Image) -> Bool {
    if self.height != other.height {return false}
    if self.width != other.width {return false}
    if self.values != other.values {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Touches_LabelledImage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "image"),
    2: .same(proto: "label"),
  ]

  fileprivate class _StorageClass {
    var _image: Touches_Image? = nil
    var _label: Touches_Label = .other

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _image = source._image
      _label = source._label
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Touches_LabelledImage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._image != other_storage._image {return false}
        if _storage._label != other_storage._label {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Touches_TrainingSet: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "labelledImages"),
  ]

  func _protobuf_generated_isEqualTo(other: Touches_TrainingSet) -> Bool {
    if self.labelledImages != other.labelledImages {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Touches_ImageList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "images"),
  ]

  func _protobuf_generated_isEqualTo(other: Touches_ImageList) -> Bool {
    if self.images != other.images {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
