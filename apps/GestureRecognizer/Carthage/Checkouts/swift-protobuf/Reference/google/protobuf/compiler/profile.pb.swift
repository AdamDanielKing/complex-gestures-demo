// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/protobuf/compiler/profile.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: seongkim@google.com (Seong Beom Kim)
//
// protoc (Protocol Compiler) can generate more efficient code
// if it knows how a workload accesses fields of a message;
// e.g. some much more frequently than others.
//
// Protos defined here describe the access information per message
// and per field. Note that one can use any methods to collect
// the access patterns like CPU profiling, instrumented build, etc.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// To convey the access pattern of a field, it classifies
/// the type of the accessor methods into getters, setters and
/// configs. Getters and setters read and write the field
/// respectively and other operations like checking if the field
/// exists are considered as configs.
struct Google_Protobuf_Compiler_FieldAccessInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".FieldAccessInfo"

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var gettersCount: UInt64 {
    get {return _gettersCount ?? 0}
    set {_gettersCount = newValue}
  }
  /// Returns true if `gettersCount` has been explicitly set.
  var hasGettersCount: Bool {return self._gettersCount != nil}
  /// Clears the value of `gettersCount`. Subsequent reads from it will return its default value.
  mutating func clearGettersCount() {self._gettersCount = nil}

  var settersCount: UInt64 {
    get {return _settersCount ?? 0}
    set {_settersCount = newValue}
  }
  /// Returns true if `settersCount` has been explicitly set.
  var hasSettersCount: Bool {return self._settersCount != nil}
  /// Clears the value of `settersCount`. Subsequent reads from it will return its default value.
  mutating func clearSettersCount() {self._settersCount = nil}

  var configsCount: UInt64 {
    get {return _configsCount ?? 0}
    set {_configsCount = newValue}
  }
  /// Returns true if `configsCount` has been explicitly set.
  var hasConfigsCount: Bool {return self._configsCount != nil}
  /// Clears the value of `configsCount`. Subsequent reads from it will return its default value.
  mutating func clearConfigsCount() {self._configsCount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._name)
      case 2: try decoder.decodeSingularUInt64Field(value: &self._gettersCount)
      case 3: try decoder.decodeSingularUInt64Field(value: &self._settersCount)
      case 4: try decoder.decodeSingularUInt64Field(value: &self._configsCount)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._gettersCount {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    }
    if let v = self._settersCount {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    }
    if let v = self._configsCount {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _name: String? = nil
  fileprivate var _gettersCount: UInt64? = nil
  fileprivate var _settersCount: UInt64? = nil
  fileprivate var _configsCount: UInt64? = nil
}

/// "count" correlates with how many samples an access info has
/// for a message. High "count" means more confident optimization
/// based on the info.
struct Google_Protobuf_Compiler_MessageAccessInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".MessageAccessInfo"

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var count: UInt64 {
    get {return _count ?? 0}
    set {_count = newValue}
  }
  /// Returns true if `count` has been explicitly set.
  var hasCount: Bool {return self._count != nil}
  /// Clears the value of `count`. Subsequent reads from it will return its default value.
  mutating func clearCount() {self._count = nil}

  var field: [Google_Protobuf_Compiler_FieldAccessInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._name)
      case 2: try decoder.decodeSingularUInt64Field(value: &self._count)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.field)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._count {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    }
    if !self.field.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.field, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _name: String? = nil
  fileprivate var _count: UInt64? = nil
}

struct Google_Protobuf_Compiler_AccessInfo: SwiftProtobuf.Message {
  static let protoMessageName: String = _protobuf_package + ".AccessInfo"

  var message: [Google_Protobuf_Compiler_MessageAccessInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.message)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.message, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.protobuf.compiler"

extension Google_Protobuf_Compiler_FieldAccessInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "getters_count"),
    3: .standard(proto: "setters_count"),
    4: .standard(proto: "configs_count"),
  ]

  func _protobuf_generated_isEqualTo(other: Google_Protobuf_Compiler_FieldAccessInfo) -> Bool {
    if self._name != other._name {return false}
    if self._gettersCount != other._gettersCount {return false}
    if self._settersCount != other._settersCount {return false}
    if self._configsCount != other._configsCount {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Google_Protobuf_Compiler_MessageAccessInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "count"),
    3: .same(proto: "field"),
  ]

  func _protobuf_generated_isEqualTo(other: Google_Protobuf_Compiler_MessageAccessInfo) -> Bool {
    if self._name != other._name {return false}
    if self._count != other._count {return false}
    if self.field != other.field {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Google_Protobuf_Compiler_AccessInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
  ]

  func _protobuf_generated_isEqualTo(other: Google_Protobuf_Compiler_AccessInfo) -> Bool {
    if self.message != other.message {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
